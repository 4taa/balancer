user root;
worker_processes auto;
pid /run/nginx.pid;

events {
	worker_connections 768;
}

http {
    lua_package_path "/root/lua-resty-upstream-healthcheck/lib/?.lua;;";

    upstream servers {
		server 142.93.67.194 max_fails=2 fail_timeout=10s;
		server 68.183.48.203 max_fails=2 fail_timeout=10s;
		server 45.55.47.24 max_fails=2 fail_timeout=10s;
	}

    lua_shared_dict healthcheck 1m;

    lua_socket_log_errors off;

    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "servers",
            type = "http",

            http_req = "GET /api/check HTTP/1.0\r\nHost: servers\r\n\r\n",

            interval = 2000,
            timeout = 1000,
            fall = 3,
            rise = 2,
            valid_statuses = {200},
            concurrency = 10,
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        end
    }

	server {
		listen 80;
		location / {
			proxy_set_header Host $http_host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_pass http://servers;
			proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
			proxy_next_upstream_timeout 0;
			proxy_next_upstream_tries 2;
		}

        location /hc-info {
	        content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
            	ngx.say("Nginx Worker PID: ", ngx.worker.pid())
            	ngx.print(hc.status_page())
            }
	}
	}

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	gzip on;
}